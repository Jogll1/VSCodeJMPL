{
	"scopeName": "source.jmpl",
	"fileTypes": [
		"jmpl",
		"JMPL"
	],
	"name": "JMPL",
	"patterns": [{ "include": "#expression" }],
	"repository": {
		"expression": {
		"patterns": [
			{ "include": "#comment" },
			{ "include": "#comment-block" },
			{ "include": "#strings" },
			{ "include": "#characters" },
			{ "include": "#keyword-control" },
			{ "include": "#keyword-operator" },
			{ "include": "#keyword-other" },
			{ "include": "#constant-numeric" },
			{ "include": "#constant-language" },
			{ "include": "#constant" },
			{ "include": "#paren-expression" },
			{ "include": "#identifier" }
		]
		},
		"comment": {
			"match": "//.*$",
			"name": "comment.line"
		},
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block"
		},
		"strings": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\[abefnrtv0\"'\\\\]"
				},
				{
					"name": "constant.character.escape.hex",
					"match": "\\\\x[0-9A-Fa-f]{2}(?![0-9A-Fa-f])"
				},
				{
					"name": "constant.character.escape.unicode",
					"match": "\\\\u[0-9A-Fa-f]{4}(?![0-9A-Fa-f])"
				},
				{
					"name": "constant.character.escape.unicode",
					"match": "\\\\U[0-9A-Fa-f]{6}(?![0-9A-Fa-f])"
				}	
			]
		},
		"characters": {
			"begin": "'",
			"end": "'",
			"name": "string.quoted.single.character",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\[abefnrtv0\"'\\\\]"
				},
				{
					"name": "constant.character.escape.hex",
					"match": "\\\\x[0-9A-Fa-f]{2}(?![0-9A-Fa-f])"
				},
				{
					"name": "constant.character.escape.unicode",
					"match": "\\\\u[0-9A-Fa-f]{4}(?![0-9A-Fa-f])"
				},
				{
					"name": "constant.character.escape.unicode",
					"match": "\\\\U[0-9A-Fa-f]{6}(?![0-9A-Fa-f])"
				}
			]
		},
		"keyword-control": {
			"match": "\\b(if|then|else|while|for|do|return|with)\\b",
			"name": "keyword.control"
		},
		"keyword-operator": {
			"match": "\\b(not|and|or|mod|intersect|union|subset|subseteq|in|forall|exists|some|arb)\\b",
			"name": "keyword.control"
		},
		"keyword-other": {
			"match": "\\b(let|func)\\b",
			"name": "keyword.other"
		},
		"constant-numeric": {
			"match": "\\b\\d+(\\.\\d+)?\\b",
			"name": "constant.numeric"
		},
		"constant-language": {
			"match": "\\b(true|false|null)\\b",
			"name": "constant.language"
		},
		"paren-expression": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.open" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.close" }
			},
			"name": "expression.group",
			"patterns": [{ "include": "#expression" }]
		},
		"identifier": {
			"match": "\\b[a-zA-Z_\\u0370-\\u03FF\\u1F00-\\u1FFF][a-zA-Z0-9_\\u0370-\\u03FF\\u1F00-\\u1FFF]*\\b",
			"name": "variable.other.identifier"
		}
	}
}